name = "AddRepaymentOrder success"
sighashes = [investor, fundraiser, collector]
result = pass

signer = Signer!(collector)
request = TpProcessRequest { tip: 13, ..default }

let tse = ToStateEntryCtx::new(5);
let register_address_investor = register_address_for("investoraddress");
let register_address_fundraiser = register_address_for("fundraiseraddress");
let register_address_collector = register_address_for("collectoraddress");

let (investor_address_id, investor_address) = tse.state_entry_from(register_address_investor, investor);
let (fundraiser_address_id, fundraiser_address) = tse.state_entry_from(register_address_fundraiser, fundraiser);
let (collector_address_id, collector_address) = tse.state_entry_from(register_address_collector, collector);

let add_ask_order = AddAskOrder {
    address_id: investor_address_id.into(),
    amount_str: "1000".into(),
    interest: "100".into(),
    maturity: "10".into(),
    fee_str: "1".into(),
    expiration: 10000.into(),
};

let add_ask_order_guid = Guid::random();
let (ask_order_id, ask_order) = tse.state_entry_from(
    add_ask_order,
    AddAskOrderArgs { 
        guid: add_ask_order_guid, 
        address: investor_address,
        sighash: investor 
    } 
);

let add_bid_order = AddBidOrder {
    address_id: fundraiser_address_id.into(),
    amount_str: "1000".into(),
    interest: "100".into(),
    maturity: "10".into(),
    fee_str: "1".into(),
    expiration: 10000.into(),
};

let add_bid_order_guid = Guid::random();
let (bid_order_id, bid_order) = tse.state_entry_from(
    add_bid_order, 
    AddBidOrderArgs {
        guid: add_bid_order_guid,
        address: fundraiser_address,
        sighash: fundraiser
    }
);

let add_offer = AddOffer {
    ask_order_id: ask_order_id.into(),
    bid_order_id: bid_order_id.into(),
    expiration: 10000.into(),
};

let add_offer_guid = Guid::random();
let (offer_id, offer) = tse.state_entry_from(
    add_offer,
    AddOfferArgs {
        src_address: investor_address,
        sighash: investor
    }
);


let add_deal_order_guid = Guid::random();
let add_deal_order = AddDealOrder {
    offer_id: offer_id.into(),
    expiration: 10000.into(),
};

let (deal_order_id, deal_order) = tse.state_entry_from(
    add_deal_order,
    AddDealOrderArgs {
        bid_order,
        ask_order,
        offer,
        sighash: fundraiser
    }
);


let register_transfer = RegisterTransfer {
    gain: 0.into(),
    order_id: deal_order_id.into(),
    blockchain_tx_id: s"blockchaintxid",
};

let (transfer_id, transfer) = tse.state_entry_from(register_transfer,
    RegisterTransferArgs {
        kind: TransferKind::DealOrder(deal_order),
        src_address: investor_address,
        src_sighash: investor,
    }
);

let complete_deal_order = CompleteDealOrder {
    deal_order_id: deal_order_id.into(),
    transfer_id: transfer_id.into()
};

let updated_deal_order = crate::protos::DealOrder {
    loan_transfer: transfer_id.into(),
    block: rust { tse.tip().to_string() },
    ..deal_order
}

let updated_transfer = crate::protos::Transfer {
    processed: true,
    ..transfer
};


let add_repayment_order = AddRepaymentOrder {
    deal_order_id: deal_order_id.into(),
    address_id: collector_address_id.into(),
    amount_str: s"100",
    expiration: 10000.into()
}

command = add_repayment_order;

let (repayment_order_id, repayment_order) = tse.state_entry_from(add_repayment_order, 
    AddRepaymentOrderArgs {
        guid: Guid!(command),
        src_address: collector_address,
        deal_order,
        sighash: collector,
    }
);


require(
    Wallet for investor with amount = rust { tx_fee.clone() * 5 },
    Wallet for fundraiser with amount = rust { tx_fee.clone() * 3 + 1 },
    Wallet for collector with amount = rust { tx_fee.clone() * 2 },

    send transaction { register_address_investor } with signer = Signer!(investor),
    send transaction { register_address_fundraiser } with signer = Signer!(fundraiser),
    send transaction { register_address_collector } with signer = Signer!(collector),
    send transaction { add_ask_order } with signer = Signer!(investor), guid = add_ask_order_guid,
    send transaction { add_bid_order } with signer = Signer!(fundraiser), guid = add_bid_order_guid,
    send transaction { add_offer } with signer = Signer!(investor), guid = add_offer_guid,
    send transaction { add_deal_order } with signer = Signer!(fundraiser), guid = add_deal_order_guid,
    send transaction { register_transfer } with signer = Signer!(investor),
    send transaction { complete_deal_order } with signer = Signer!(investor),
)


expect(
    sighash -> collector,
    guid -> Guid!(command),
    get balance at WalletId!(collector) -> rust { tx_fee.clone() },
    get state at deal_order_id -> updated_deal_order,
    get state at repayment_order_id -> None,
    get state at investor_address_id -> investor_address,
    get state at collector_address_id -> collector_address,
    set states {
        repayment_order_id : repayment_order.to_bytes(),
        WalletId!(collector) : wallet_with(Some(0)).unwrap(),
        make_fee(&Guid!(command), &collector, Some(rust { request.tip - 1 }))
    },
)