name = "SendFunds success";
sighashes = [my_sighash, fundraiser_sighash];
command = SendFunds {
    amount: rust { 1.into() },
    sighash: fundraiser_sighash.into()
};
signer = Signer!(my_sighash);
result = pass;
request = rust { TpProcessRequest {
        tip: 3,
        ..Default::default()
    } 
};

let amount_needed = rust {
    command.amount.clone() + tx_fee
};
require (
    Wallet for my_sighash with amount = amount_needed,
    Wallet for fundraiser_sighash with amount = 0,
    Guid for command
);
let guid = Guid!(command);
expect(
    sighash -> my_sighash,
    guid -> guid,
    get balance at WalletId!(my_sighash) -> amount_needed,
    get balance at WalletId!(fundraiser_sighash) -> 0,
    set states {
        WalletId!(my_sighash) : rust { wallet_with(Some(0)).unwrap() },
        WalletId!(fundraiser_sighash) : rust { wallet_with(Some(1)).unwrap() },
        rust { 
            AddressId::with_prefix_key(crate::handler::constants::FEE, guid.as_str() ) 
        } : rust { 
            crate::protos::Fee {
                sighash: my_sighash.clone().into(),
                block: 2u64.to_string()
            }.to_bytes()
        }
    }
);

---

name = "SendFunds cannot afford fee";
sighashes = [my_sighash, fundraiser_sighash];
command = SendFunds {
    amount: rust { 1.into() },
    sighash: fundraiser_sighash.into(),
};
signer = Signer!(my_sighash);
result = fail(err = "Insufficient funds");
require(
    Wallet for my_sighash with amount = 1,
    Guid for command
);
expect(
    sighash -> my_sighash,
    get balance at WalletId!(my_sighash) -> Some(1),
);

---

name = "SendFunds cannot afford amount";
sighashes = [my_sighash, fundraiser_sighash];
command = SendFunds {
    amount: rust { 1.into() },
    sighash: fundraiser_sighash.into()
};
signer = Signer!(my_sighash);
result = fail(err = "Insufficient funds");

require (
    Wallet for my_sighash with amount = tx_fee,
    Guid for command
);

expect (
    sighash -> my_sighash,
    get balance at WalletId!(my_sighash) -> tx_fee,
);

---

name = "SendFunds to self";
sighashes = [my_sighash];
command = SendFunds {
    amount: rust { 1.into() },
    sighash: my_sighash.into(),
};
signer = Signer!(my_sighash);
result = fail(err = "Invalid destination");
require(
    Guid for command
);
expect(
    sighash -> my_sighash
);