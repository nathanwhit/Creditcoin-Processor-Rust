name = "AddAskOrder success"
sighashes = [investor]
result = pass

let register_address = register_address_for("investoraddress");
let register_address_guid = Guid!();
let (address_id, address) = tse.state_entry_from(register_address, SigHash!(investor));

let add_ask_order = AddAskOrder {
    address_id: address_id.into(),
    amount_str: "1000".into(),
    interest: "100".into(),
    maturity: "10".into(),
    fee_str: "1".into(),
    expiration: 10000.into(),
};
let add_ask_order_guid = Guid!();

let (ask_order_id, ask_order) = tse.state_entry_from(add_ask_order, AddAskOrderArgs {
    guid: add_ask_order_guid,
    sighash: SigHash!(investor),
    address,
});

guid = add_ask_order_guid
command = add_ask_order
signer = Signer!(investor)

require(
    Wallet for investor with amount = rust { tx_fee * 2 },
    send transaction { register_address } with signer = Signer!(investor), guid = register_address_guid,
)

expect(
    sighash -> SigHash!(investor),
    guid -> Guid!(command),
    guid -> Guid!(command),
    get balance at WalletId!(investor) -> tx_fee,
    get state at ask_order_id -> None,
    get state at address_id -> Some(address),
    set states {
        WalletId!(investor) : wallet_with(Some(0)).unwrap(),
        ask_order_id.to_string() : ask_order.to_bytes(),
        make_fee(&Guid!(command), &SigHash!(investor), Some(2)),
    }
)