name = "AddOffer success"
sighashes = [investor, fundraiser]
result = pass


let add_ask_order_guid = Guid::random();
let add_bid_order_guid = Guid::random();

let register_address_investor = register_address_for("investoraddress");
let (investor_address_id, investor_address) = tse.state_entry_from(register_address_investor, SigHash!(investor));

let register_address_fundraiser = register_address_for("fundraiseraddress");
let (fundraiser_address_id, fundraiser_address) = tse.state_entry_from(register_address_fundraiser, SigHash!(fundraiser));

let add_ask_order = AddAskOrder {
    address_id: investor_address_id.into(),
    amount_str: "1000".into(),
    interest: "100".into(),
    maturity: "10".into(),
    fee_str: "1".into(),
    expiration: 10000.into(),
};
let (ask_order_id, ask_order) = tse.state_entry_from(add_ask_order, AddAskOrderArgs {
    guid: add_ask_order_guid,
    address: investor_address,
    sighash: SigHash!(investor),
});

let add_bid_order = AddBidOrder {
    address_id: fundraiser_address_id.into(),
    amount_str: "1000".into(),
    interest: "100".into(),
    maturity: "10".into(),
    fee_str: "1".into(),
    expiration: 10000.into(),
};
let (bid_order_id, bid_order) = tse.state_entry_from(add_bid_order, AddBidOrderArgs {
    guid: add_bid_order_guid,
    address: fundraiser_address,
    sighash: SigHash!(fundraiser),
});

let add_offer = AddOffer {
    ask_order_id: ask_order_id.into(),
    bid_order_id: bid_order_id.into(),
    expiration: 10000.into(),
};

let (offer_id, offer) = tse.state_entry_from(add_offer, AddOfferArgs {
    src_address: investor_address,
    sighash: SigHash!(investor)
});

command = add_offer
signer = Signer!(investor)
request = TpProcessRequest { tip: 7, ..default }

require(
    Wallet for investor with amount = rust { tx_fee.clone() * 3 },
    Wallet for fundraiser with amount = rust { tx_fee.clone() * 2 },
    send transaction { register_address_investor } with signer = Signer!(investor),
    send transaction { register_address_fundraiser } with signer = Signer!(fundraiser),
    send transaction { add_ask_order } with signer = Signer!(investor), guid = add_ask_order_guid,
    send transaction { add_bid_order } with signer = Signer!(fundraiser), guid = add_bid_order_guid,
)

expect(
    sighash -> investor,
    guid -> Guid!(command),
    get balance at WalletId!(investor) -> tx_fee,
    get state at offer_id -> None,
    get state at command.ask_order_id -> ask_order,
    get state at command.bid_order_id -> bid_order,
    get state at investor_address_id -> investor_address,
    get state at fundraiser_address_id -> fundraiser_address,

    set states {
        offer_id : offer.to_bytes(),
        WalletId!(investor) : wallet_with(Some(0)).unwrap(),
        make_fee(&Guid!(command), &investor, Some(rust { tse.tip() - 1 }))
    }
)