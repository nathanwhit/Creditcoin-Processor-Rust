name = "AddDealOrder success"
sighashes = [investor, fundraiser]
result = pass

let investor_address_id = address_id_for("investoraddress")
let fundraiser_address_id = address_id_for("fundraiseraddress")

let add_ask_order_guid = Guid::random();
let add_bid_order_guid = Guid::random();
let add_offer_guid = Guid::random();


let ask_order_id = AddressId::with_prefix_key(ASK_ORDER, add_ask_order_guid.as_str());
let bid_order_id = AddressId::with_prefix_key(BID_ORDER, add_bid_order_guid.as_str());

let offer_id = AddressId::with_prefix_key(OFFER, rust { &string!(&ask_order_id, &bid_order_id) });

command = AddDealOrder {
    offer_id: offer_id.into(),
    expiration: 10000.into(),
};

signer = Signer!(fundraiser)
request = TpProcessRequest { tip: 8, ..default }

let investor_address_proto = address_for("investoraddress", &SigHash!(investor));
let fundraiser_address_proto = address_for("fundraiseraddress", &SigHash!(fundraiser));

let add_ask_order = AddAskOrder {
    address_id: investor_address_id.into(),
    amount_str: "1000".into(),
    interest: "100".into(),
    maturity: "10".into(),
    fee_str: "1".into(),
    expiration: 10000.into(),
};

let ask_order = crate::protos::AskOrder {
    blockchain: investor_address_proto.blockchain.clone(),
    address: add_ask_order.address_id.clone(),
    amount: add_ask_order.amount_str.clone(),
    interest: add_ask_order.interest.clone(),
    maturity: add_ask_order.maturity.clone(),
    fee: add_ask_order.fee_str.clone(),
    expiration: add_ask_order.expiration.into(),
    block: rust { (request.tip - 4).to_string() },
    sighash: investor.into()
};

let add_bid_order = AddBidOrder {
    address_id: fundraiser_address_id.into(),
    amount_str: "1000".into(),
    interest: "100".into(),
    maturity: "10".into(),
    fee_str: "1".into(),
    expiration: 10000.into(),
};

let bid_order = crate::protos::BidOrder {
    blockchain: fundraiser_address_proto.blockchain.clone(),
    address: fundraiser_address_id.into(),
    amount: add_bid_order.amount_str.clone(),
    interest: add_bid_order.interest.clone(),
    maturity: add_bid_order.maturity.clone(),
    fee: add_bid_order.fee_str.clone(),
    expiration: add_bid_order.expiration.into(),
    block: rust { (request.tip - 3).to_string() },
    sighash: fundraiser.into()
};

let add_offer = AddOffer {
    ask_order_id: ask_order_id.into(),
    bid_order_id: bid_order_id.into(),
    expiration: 10000.into(),
};

let offer = crate::protos::Offer {
    blockchain: investor_address_proto.blockchain.clone(),
    ask_order: ask_order_id.into(),
    bid_order: bid_order_id.into(),
    expiration: command.expiration.into(),
    block: rust { (request.tip - 2).to_string() },
    sighash: investor.to_string(),
};


require(
    Wallet for investor with amount = rust { tx_fee.clone() * 3 },
    Wallet for fundraiser with amount = rust { tx_fee.clone() * 3 + 1 },
    Guid for add_ask_order,
    Guid for add_bid_order,
    send transaction { register_address_for("investoraddress") } with signer = Signer!(investor),
    send transaction { register_address_for("fundraiseraddress") } with signer = Signer!(fundraiser),
    send transaction { add_ask_order } with signer = Signer!(investor), guid = add_ask_order_guid,
    send transaction { add_bid_order } with signer = Signer!(fundraiser), guid = add_bid_order_guid,
    send transaction { add_offer } with signer = Signer!(investor), guid = add_offer_guid,
)

let deal_order_id = AddressId::with_prefix_key(DEAL_ORDER, &command.offer_id);
let deal_order = crate::protos::DealOrder {
    blockchain: offer.blockchain,
    src_address: ask_order.address,
    dst_address: bid_order.address,
    amount: bid_order.amount,
    interest: bid_order.interest,
    maturity: bid_order.maturity,
    fee: bid_order.fee,
    expiration: command.expiration.into(),
    sighash: fundraiser.to_string(),
    block: rust { (request.tip - 1).to_string() },
    ..default
}

expect(
    sighash -> fundraiser,
    guid -> Guid!(command),
    get balance at WalletId!(fundraiser) -> rust { tx_fee.clone() + 1 },
    get state at deal_order_id -> None,
    get state at offer_id -> offer,
    get state at ask_order_id -> ask_order,
    get state at bid_order_id -> bid_order,

    set states {
        deal_order_id : deal_order.to_bytes(),
        WalletId!(fundraiser) : wallet_with(Some(0)).unwrap(),
        make_fee(&Guid!(command), &fundraiser, Some(rust { request.tip - 1 }))
    },
    delete states [offer.ask_order.clone(), offer.bid_order.clone(),offer_id.clone()]
)