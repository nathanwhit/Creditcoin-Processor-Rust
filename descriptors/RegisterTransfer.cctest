name = "RegisterTransfer success"
sighashes = [investor, fundraiser]
result = pass

signer = Signer!(investor)

let add_ask_order_guid = Guid::random();
let add_bid_order_guid = Guid::random();
let add_offer_guid = Guid::random();
let add_deal_order_guid = Guid::random();

let register_address_investor = register_address_for("investoraddress");
let (investor_address_id, investor_address) = tse.state_entry_from(register_address_investor, SigHash!(investor));

let register_address_fundraiser = register_address_for("fundraiseraddress");
let (fundraiser_address_id, fundraiser_address) = tse.state_entry_from(register_address_fundraiser, SigHash!(fundraiser));

let add_ask_order = AddAskOrder {
    address_id: investor_address_id.into(),
    amount_str: "1000".into(),
    interest: "100".into(),
    maturity: "10".into(),
    fee_str: "1".into(),
    expiration: 10000.into(),
};
let (ask_order_id, ask_order) = tse.state_entry_from(add_ask_order, AddAskOrderArgs {
    guid: add_ask_order_guid,
    address: investor_address,
    sighash: SigHash!(investor),
});

let add_bid_order = AddBidOrder {
    address_id: fundraiser_address_id.into(),
    amount_str: "1000".into(),
    interest: "100".into(),
    maturity: "10".into(),
    fee_str: "1".into(),
    expiration: 10000.into(),
};
let (bid_order_id, bid_order) = tse.state_entry_from(add_bid_order, AddBidOrderArgs {
    guid: add_bid_order_guid,
    address: fundraiser_address,
    sighash: SigHash!(fundraiser),
});

let add_offer = AddOffer {
    ask_order_id: ask_order_id.into(),
    bid_order_id: bid_order_id.into(),
    expiration: 10000.into(),
};
let (offer_id, offer) = tse.state_entry_from(add_offer, AddOfferArgs {
    src_address: investor_address,
    sighash: SigHash!(investor)
});

let add_deal_order = AddDealOrder {
    offer_id: offer_id.into(),
    expiration: 10000.into(),
};

let (deal_order_id, deal_order) = tse.state_entry_from(add_deal_order, AddDealOrderArgs {
    bid_order,
    ask_order,
    offer,
    sighash: SigHash!(fundraiser)
});

let register_transfer = RegisterTransfer {
    gain: 0.into(),
    order_id: deal_order_id.into(),
    blockchain_tx_id: s"blockchaintxid",
};

let (transfer_id, transfer) = tse.state_entry_from(
    register_transfer,
    RegisterTransferArgs {
        kind: TransferKind::DealOrder(deal_order),
        src_address: investor_address,
        src_sighash: SigHash!(investor),
    }
);

command = register_transfer;

require(
    Wallet for investor with amount = rust { Integer::from(Credo::from(4) * tx_fee.clone()) },
    Wallet for fundraiser with amount = rust { Integer::from(Credo::from(4) * tx_fee.clone() )},
    send transaction { register_address_investor } with signer = Signer!(investor),
    send transaction { register_address_fundraiser } with signer = Signer!(fundraiser),
    send transaction { add_ask_order } with signer = Signer!(investor), guid = add_ask_order_guid,
    send transaction { add_bid_order } with signer = Signer!(fundraiser), guid = add_bid_order_guid,
    send transaction { add_offer } with signer = Signer!(investor), guid = add_offer_guid,
    send transaction { add_deal_order } with signer = Signer!(fundraiser), guid = add_deal_order_guid,
);

let guid = Guid!(command);

expect(
    sighash -> investor,
    guid -> Guid!(command),
    get balance at WalletId!(investor) -> tx_fee,
    get state at deal_order_id -> Some(deal_order),
    get state at investor_address_id -> Some(investor_address),
    get state at fundraiser_address_id -> Some(fundraiser_address),
    get state at transfer_id -> None,
    verify -> Ok(()),
    set states {
        transfer_id.to_string() : transfer.to_bytes(),
        WalletId!(investor) : wallet_with(Some(0)).unwrap(),
        make_fee(&guid, &investor, Some( rust { tse.tip() - 1 }))
    }
)